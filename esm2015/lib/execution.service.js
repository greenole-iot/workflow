import { PropertiesService } from '@alis/ng-base';
import { Injectable } from '@angular/core';
import * as moment from 'moment';
import { forkJoin } from 'rxjs';
import { delay, map, repeat, retryWhen } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alis/ng-base";
import * as i2 from "@angular/common/http";
export class ExecutionService {
    constructor(stateService, trackingService, http, trackingWebsocketService, eventService, eventWebsocketService) {
        this.stateService = stateService;
        this.trackingService = trackingService;
        this.http = http;
        this.trackingWebsocketService = trackingWebsocketService;
        this.eventService = eventService;
        this.eventWebsocketService = eventWebsocketService;
    }
    getYieldResult(domainId, executionId, yieldResultId) {
        const url = `${PropertiesService.properties.fileServiceUrl}/execution/yieldResult/${domainId}/${executionId}/${yieldResultId}`;
        return this.http.get(url);
    }
    getYieldResults(domainId, executionId) {
        const url = `${PropertiesService.properties.fileServiceUrl}/execution/yieldResult/${domainId}/${executionId}`;
        return this.http.get(url);
    }
    getExecutionEventsByWs(domainId, processId, executionId, filter) {
        return this.eventWebsocketService.connect(filter).pipe(map((event) => {
            if (event != null && event.domainId === domainId && event.processId === processId && event.executionId === executionId) {
                return this.processAurionEvent(event);
            }
        })).pipe(retryWhen(errors => errors.pipe(delay(1000))));
    }
    getExecutionTracesByWs(domainId, processId, executionId, filter) {
        return this.trackingWebsocketService.connect(filter).pipe(map((trace) => {
            const execution = trace;
            if (execution != null && execution.domainId === domainId && execution.processId === processId && execution.objectId === executionId) {
                return this.processAurionTrace(execution);
            }
        })).pipe(retryWhen(errors => errors.pipe(delay(1000))));
    }
    getExecutionsByWs(domainId, processId, filter) {
        return this.trackingWebsocketService.connect(filter).pipe(map((trace) => {
            const execution = trace;
            if (execution != null && execution.domainId === domainId && execution.processId === processId) {
                return this.processAurionTrace(execution);
            }
        })).pipe(retryWhen(errors => errors.pipe(delay(1000))));
    }
    getExecutionTraces(domainId, executionId, startTimestamp) {
        return this.trackingService.get(domainId, 'execution', executionId, startTimestamp).pipe(map((traces) => {
            return traces.map(item => this.processAurionTrace(item));
        }));
    }
    getExecutionTracesPoll(domainId, executionId, startTimestamp) {
        return this.trackingService.get(domainId, 'execution', executionId, startTimestamp).pipe(map((traces) => {
            return traces.map(item => this.processAurionTrace(item));
        })).pipe(delay(15000)).pipe(repeat());
    }
    getExecutions(domainId, processId) {
        return this.stateService.searchExecutionsByProcess(domainId, 'execution', processId).pipe(map((traces) => {
            return traces.map(item => this.processAurionTrace(item));
        }));
    }
    getExecutionsPoll(domainId, processId) {
        return this.stateService.searchExecutionsByProcess(domainId, 'execution', processId).pipe(map((traces) => {
            return traces.map(item => this.processAurionTrace(item));
        })).pipe(delay(30000)).pipe(repeat());
    }
    closeWebsocket() {
        if (PropertiesService.properties.trackingwebsocket) {
            this.trackingWebsocketService.disconnect();
        }
    }
    getLatestEnded(processes) {
        return forkJoin(processes.map(process => this.getLastExecution(process.domainId, process.objectId)));
    }
    getLastExecution(domainId, id) {
        return this.stateService.searchExecutionsByProcess(domainId, 'execution', id).pipe(map((states) => {
            if (states == null || states.length === 0) {
                return null;
            }
            return this.processAurionTrace(states[0]);
        }));
    }
    get(domainId, id) {
        return this.stateService.get(domainId, 'execution', id).pipe(map((state) => {
            if (state == null) {
                return null;
            }
            return this.processAurionTrace(state);
        }));
    }
    getEvents(domainId, executionId, startTimestamp) {
        return this.eventService.getEventsBySubject(domainId, 'execution', startTimestamp, "executionId.eq:" + executionId).pipe(map((events) => {
            return events.map(event => this.processAurionEvent(event));
        }));
    }
    getEventsPoll(domainId, executionId, startTimestamp) {
        return this.eventService.getEventsBySubject(domainId, 'execution', startTimestamp, "executionId.eq:" + executionId).pipe(map((events) => {
            return events.map(event => this.processAurionEvent(event));
        })).pipe(delay(1000)).pipe(repeat());
        ;
    }
    processAurionTrace(trace) {
        let execution = trace;
        execution.timestampStartPretty = trace.startedAt ? moment(trace.startedAt).format('DD/MM/YYYY HH:mm:ss') : undefined;
        execution.timestampFinalPretty = trace.finishedAt ? moment(trace.finishedAt).format('DD/MM/YYYY HH:mm:ss') : undefined;
        execution.timeEllapsedPretty = trace.executionTime ? (trace.executionTime / 1000) + 's' : null;
        execution.timestampPretty = trace.timestamp ? moment(trace.timestamp).format('DD/MM/YYYY HH:mm:ss') : undefined;
        return execution;
    }
    processAurionEvent(event) {
        let executionEvent = event;
        executionEvent.timestampPretty = event.timestamp ? moment(event.timestamp).format('DD/MM/YYYY HH:mm:ss') : undefined;
        return executionEvent;
    }
}
ExecutionService.ɵfac = function ExecutionService_Factory(t) { return new (t || ExecutionService)(i0.ɵɵinject(i1.StateService), i0.ɵɵinject(i1.TrackingService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i1.TrackingWebsocketService), i0.ɵɵinject(i1.EventService), i0.ɵɵinject(i1.EventWebsocketService)); };
ExecutionService.ɵprov = i0.ɵɵdefineInjectable({ token: ExecutionService, factory: ExecutionService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(ExecutionService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.StateService }, { type: i1.TrackingService }, { type: i2.HttpClient }, { type: i1.TrackingWebsocketService }, { type: i1.EventService }, { type: i1.EventWebsocketService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,