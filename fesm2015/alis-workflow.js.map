{"version":3,"file":"alis-workflow.js","sources":["../../../projects/workflow/src/lib/execution.service.ts","../../../projects/workflow/src/lib/model/event.ts","../../../projects/workflow/src/lib/model/eventDTO.ts","../../../projects/workflow/src/lib/model/execution.ts","../../../projects/workflow/src/lib/model/executionDTO.ts","../../../projects/workflow/src/lib/model/schedule.ts","../../../projects/workflow/src/lib/model/process.ts","../../../projects/workflow/src/lib/model/parameters-definition.ts","../../../projects/workflow/src/lib/model/entry-input.ts","../../../projects/workflow/src/lib/model/input-definition.ts","../../../projects/workflow/src/lib/model/data-source.ts","../../../projects/workflow/src/lib/model/processStep.ts","../../../projects/workflow/src/lib/process.service.ts","../../../projects/workflow/src/lib/workflow-lib.module.ts","../../../projects/workflow/src/lib/model/file-service-metadata.ts","../../../projects/workflow/src/lib/file-service-metadata.service.ts","../../../projects/workflow/src/lib/schedule.service.ts","../../../projects/workflow/src/public-api.ts","../../../projects/workflow/src/alis-workflow.ts"],"sourcesContent":["import { EventService, PropertiesService, StateService, Trace, Event, TrackingWebsocketService, EventWebsocketService, TrackingService } from '@alis/ng-base';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport * as moment from 'moment';\nimport { forkJoin, Observable } from 'rxjs';\nimport { delay, map, repeat, retryWhen, filter } from 'rxjs/operators';\nimport { ExecutionDTO } from './model/executionDTO';\nimport { Process } from './model/process';\nimport { EventDTO } from './model/eventDTO';\nimport { Execution } from './model/execution';\nimport { YieldResult } from './model/yieldResult';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExecutionService {\n  constructor(private stateService: StateService, private trackingService: TrackingService, private http: HttpClient, private trackingWebsocketService: TrackingWebsocketService, private eventService: EventService, private eventWebsocketService: EventWebsocketService) { }\n\n\n  getYieldResult(domainId: string, executionId: string, yieldResultId: string): Observable<YieldResult> {\n    const url = `${PropertiesService.properties.fileServiceUrl}/execution/yieldResult/${domainId}/${executionId}/${yieldResultId}`;\n    return this.http.get<YieldResult>(url);\n  }\n\n  getYieldResults(domainId: string, executionId: string): Observable<YieldResult[]> {\n    const url = `${PropertiesService.properties.fileServiceUrl}/execution/yieldResult/${domainId}/${executionId}`;\n    return this.http.get<YieldResult[]>(url);\n  }\n\n\n  getExecutionEventsByWs(domainId: string, processId: string, executionId: string, filter: any): Observable<EventDTO> {\n    return this.eventWebsocketService.connect(filter).pipe(map((event: Event) => {\n      if(event != null && event.domainId === domainId && event.processId === processId && event.executionId === executionId){\n        return this.processAurionEvent(event);\n      }\n    })).pipe(retryWhen(errors =>\n      errors.pipe(\n        delay(1000)\n      )))\n  }\n\n\n  getExecutionTracesByWs(domainId: string, processId: string, executionId: string, filter: any): Observable<ExecutionDTO> {\n    return this.trackingWebsocketService.connect(filter).pipe(map((trace: any) => {\n      const execution: Execution = trace as Execution;\n      if (execution != null && execution.domainId === domainId && execution.processId === processId && execution.objectId === executionId) {\n          return this.processAurionTrace(execution);\n      }\n    })).pipe(retryWhen(errors =>\n      errors.pipe(\n        delay(1000)\n      )))\n  }\n\n\n  getExecutionsByWs(domainId: string, processId: string, filter: any): Observable<ExecutionDTO> {\n    return this.trackingWebsocketService.connect(filter).pipe(map((trace: any) => {\n      const execution: Execution = trace as Execution;\n      if (execution != null && execution.domainId === domainId && execution.processId === processId) {\n          return this.processAurionTrace(execution);\n      }\n    })).pipe(retryWhen(errors =>\n      errors.pipe(\n        delay(1000)\n      )))\n  }\n\n  getExecutionTraces(domainId: string, executionId: string, startTimestamp: string): Observable<ExecutionDTO[]> {\n    return this.trackingService.get(domainId, 'execution', executionId, startTimestamp).pipe(map((traces: Array<Trace>) => {\n      return traces.map(item => this.processAurionTrace(item));\n    }))\n  }\n\n  getExecutionTracesPoll(domainId: string, executionId: string, startTimestamp: string): Observable<ExecutionDTO[]> {\n    return this.trackingService.get(domainId, 'execution', executionId, startTimestamp).pipe(map((traces: Array<Trace>) => {\n      return traces.map(item => this.processAurionTrace(item));\n    })).pipe(delay(15000)).pipe(repeat());\n  }\n\n\n  getExecutions(domainId: string, processId: string): Observable<ExecutionDTO[]> {\n    return this.stateService.searchExecutionsByProcess(domainId, 'execution', processId).pipe(map((traces: Array<Trace>) => {\n      return traces.map(item => this.processAurionTrace(item));\n    }))\n  }\n\n  getExecutionsPoll(domainId: string, processId: string): Observable<ExecutionDTO[]> {\n    return this.stateService.searchExecutionsByProcess(domainId, 'execution', processId).pipe(map((traces: Array<Trace>) => {\n      return traces.map(item => this.processAurionTrace(item));\n    })).pipe(delay(30000)).pipe(repeat());\n  }\n\n  closeWebsocket() {\n    if (PropertiesService.properties.trackingwebsocket) {\n      this.trackingWebsocketService.disconnect();\n    }\n  }\n\n  getLatestEnded(processes: Process[]): Observable<ExecutionDTO[]> {\n    return forkJoin(processes.map(process => this.getLastExecution(process.domainId, process.objectId)));\n  }\n\n  getLastExecution(domainId: string, id: string): Observable<ExecutionDTO> {\n    return this.stateService.searchExecutionsByProcess(domainId, 'execution', id).pipe(map((states: Array<Trace>) => {\n      if (states == null || states.length === 0) {\n        return null;\n      }\n      return this.processAurionTrace(states[0]);\n    }));\n  }\n\n  get(domainId: string, id: string): Observable<ExecutionDTO> {\n    return this.stateService.get(domainId, 'execution', id).pipe(map((state) => {\n      if (state == null) {\n        return null;\n      }\n      return this.processAurionTrace(state);\n    }));\n  }\n\n  getEvents(domainId: string, executionId: string, startTimestamp: number): Observable<EventDTO[]> {\n    return this.eventService.getEventsBySubject(domainId, 'execution', startTimestamp, \"executionId.eq:\" + executionId).pipe(map( (events: Array<Event>) => {\n      return events.map(event => this.processAurionEvent(event));\n    }));\n  }\n\n  getEventsPoll(domainId: string, executionId: string, startTimestamp: number): Observable<EventDTO[]> {\n    return this.eventService.getEventsBySubject(domainId, 'execution', startTimestamp, \"executionId.eq:\" + executionId).pipe(map( (events: Array<Event>) => {\n      return events.map(event => this.processAurionEvent(event));\n    })).pipe(delay(1000)).pipe(repeat());;\n  }\n\n  private processAurionTrace(trace: any): ExecutionDTO {\n    let execution = trace as ExecutionDTO;\n\n    execution.timestampStartPretty = trace.startedAt ? moment(trace.startedAt).format('DD/MM/YYYY HH:mm:ss') : undefined;\n    execution.timestampFinalPretty = trace.finishedAt ? moment(trace.finishedAt).format('DD/MM/YYYY HH:mm:ss') : undefined;\n    execution.timeEllapsedPretty = trace.executionTime ? (trace.executionTime / 1000) + 's' : null\n    execution.timestampPretty = trace.timestamp ? moment(trace.timestamp).format('DD/MM/YYYY HH:mm:ss') : undefined;\n    return execution;\n  }\n\n  private processAurionEvent(event: any): EventDTO {\n    let executionEvent = event as EventDTO;\n    executionEvent.timestampPretty = event.timestamp ? moment(event.timestamp).format('DD/MM/YYYY HH:mm:ss') : undefined;\n    return executionEvent;\n  }\n\n\n}","export class Event {\n  objectId: string;\n  domainId: string;\n  subDomainId: string;\n  processId: string;\n  executionId: string;\n  eventType: string;\n  subject: string;\n  description: string;\n  domainData: any;\n  timestamp: string;\n}\n","import { Event } from './event'\nexport class EventDTO extends Event  {\n  timestampPretty: string;\n  eventTypeLabel: string;\n}\n","export class Execution {\n  objectId: string//(UUID);Id\n  domainId: string;\n  subDomainId: string;\n  processId: string\n  client: string;\n  startedAt: number; // inÃ­cio(OBS: talvez isso ja seja calculado pelo aurion - firstTimestamp) (opcional)(se nÃ£o for enviado, serÃ¡ a 1a etapa se houver, cc nÃ£o haverÃ¡)\n  startedAtTimestamp: number; //(OBS: talvez isso ja seja calculado pelo aurion - lastTimestamp)(serÃ¡ a Ãºltima etapa se houver, cc serÃ¡ a hora do resultado)\n  finishedAt: number;\n  finishedAtTimestamp: number;\n  executionTime:  number; //(diferenÃ§a entre inÃ­cio e fim se houver, cc 0)\n  stage: string;//(pode ser uma tag se quiser que seja buscÃ¡vel)\n  state: string;//'in-execution' | 'finished-with-sucess' | 'finished-with-failure' //(em execuÃ§Ã£o / terminado com sucesso / terminado com falha) (pode ser uma tag se quiser que seja buscÃ¡vel)\n  errors: any;//(opcional)(json livre)\n  user: any;//usuÃ¡rio que iniciou a execuÃ§Ã£o\n  inputs: any;//(ids de empresa, estado, contrato, etc)\n  outputs: any;\n  executionMode: string //indica o tipo de execuÃ§Ã£o : 'preview' | 'default' \n  config: any;// no momento da execuÃ§Ã£o\n  parentId: string;//(opcional), identifica que essa execuÃ§Ã£o Ã© uma paralelizaÃ§Ã£o parte de uma execuÃ§Ã£o maior\n  domainData: any;// dados especÃ­ficos do domÃ­nio. ex no acracl: tipo(agendamento / manual de revisÃ£o / cliente final),\n}","import { Execution } from './execution'\n\nexport class ExecutionDTO extends Execution {\n    timestampStartPretty: string;\n    timestampFinalPretty: string;\n    timeEllapsedPretty: string;\n    timestampPretty: string;\n    statePretty: string;\n    executionMode: string;\n}","export class Schedule {\n\n  processId: string; // \"aa00ce36fe53474086b7b048dda2859f\"\n  objectId: string; // \"d9a87be9-1447-4f88-9f40-35b864b4adce\"\n  name: string; // \"Teste Anomalias\"\n  executionMode: string; // \"default\"\n  inputs: Array<{ code: string, value: any }>; // [{ \"code\":\"summary\", \"value\":true }],\n  dayOfMonth: number; //0,\n  cron: string; //\"0 27 18 * * 1-6\"\n  repetitionType: string; // \"WEEK\"\n  runAt: number //43200000 - 09:00\n  dayOfWeek: number; //1\n\n  constructor () {}\n}\n","import { ParametersDefinition } from \"./parameters-definition\";\nimport { ProcessStep } from \"./processStep\";\n\nexport class Process {\n  // id: string;\n  //Sversion: number;\n\n  //trace\n  domainId: string;\n  timespan: string;\n  traceType: string;\n  objectId: string;\n  timestamp: number;\n  subDomainId: string;\n  tags: string[];\n\n  //custom\n  version: string;\n  name?: string;\n  description?: string;\n  executionType: any;\n  executionData: any;\n  hidden?: string;\n\n  stages?: ProcessStep[];\n  inputs?: {\n    label: string,\n    code: string\n  }[];\n  outputs?: {\n    label: string,\n    code: string\n  }[];\n  config?: any;\n  state: any;\n  supportedExecutionModes:string[];\n  parameters: ParametersDefinition;\n}\n","\nimport { EntryInput } from \"./entry-input\";\nimport { InputDefinition } from \"./input-definition\";\n\nexport class ParametersDefinition {\n\n  definitions: Array<InputDefinition>;\n  values: Array<any>;\n\n  constructor () {}\n}\n","import { DataSource } from \"./data-source\";\n\nexport class EntryInput {\n  code: string;\n  value: string;\n  valueSource: DataSource;\n\n  constructor () {}\n}\n","import { DataSource } from \"./data-source\";\n\nexport class InputDefinition {\n   label: string;\n   required: boolean;\n   code: string;\n   type: string;\n   valueDomain: any //Map<String, String> ;\n   domainSource: DataSource;\n   range: string;\n   rangeSource: DataSource;\n\n\n  constructor () {}\n}\n","export class DataSource {\n\n  url: string;\n  method: string;\n  body: string;\n  headers: any //Map<String, String>;\n  translateFunction: string;\n\n  constructor () {}\n\n}\n","export class ProcessStep {\n  id: string;\n  name: string;\n  description: string\n}","import { PropertiesService, TrackingService } from '@alis/ng-base';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map} from 'rxjs/operators';\nimport { Process } from './model/process';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProcessService {\n\n  constructor(private trackingService: TrackingService, private http: HttpClient) { }\n\n  /*\n  cadu  3:15 PM\n  na doc da modelagem do workflows eu tive q adicionar na ExecuÃ§Ã£o 2 campos, o context e location\n  context Ã© o cliente (AES) e location Ã© o processo\n  */\n\n  get(domainId: string): Observable<Process[]> {\n    return this.trackingService.getByType(domainId, 'process').pipe(map((traces: Process[]) => {\n      return traces.map(trace => {\n        return trace as Process;\n      })\n    }))\n  }\n\n  getById(domainId: string, processId: string): Observable<Process> {\n    return this.get(domainId).pipe(map(items => {\n      return items.find(item => item.objectId == processId);\n    }))\n  }\n\n  save(process: Process): Observable<any> {\n    return this.trackingService.set(process);\n  }\n\n  execute(domainId: string, processObjectId: string, inputs: { code: string, value: any }[], executionMode: string = \"default\"): Observable<any> {\n\n    let url = `${PropertiesService.properties.fileServiceUrl}/execution/start/${domainId}/${processObjectId}`;\n    let userJSON = sessionStorage.getItem('user');\n    let user = userJSON != null && userJSON != '' ? JSON.parse(userJSON) : \"\";\n\n    // let inputsPostFormat = inputs.reduce((prev, cur) => { prev[cur.id] = cur.value; return prev }, {});\n\n    return this.http.post(url, { processId: processObjectId, inputs: inputs, executionMode: executionMode },\n      {\n        headers: {\n          'Authorization': 'Bearer ' + user.idToken \n        }\n      });\n  }\n\n  continue(domainId: string, executionId: string, inputs: { id: string, value: any }[]): Observable<any> {\n    let url = `${PropertiesService.properties.fileServiceUrl}/execution/${domainId}/${executionId}/continue`;\n\n    let userJSON = sessionStorage.getItem('user');\n    const parsedUserJSON = userJSON != null && userJSON != '' ? JSON.parse(userJSON) : \"\";\n\n    let payload = {\n      domainId: domainId,\n      executionId: executionId,\n      inputs: inputs,\n      user: parsedUserJSON.idTokenPayload?.nickname || \"\",\n    };\n\n    return this.http.post(url, payload, \n    {\n      headers: {\n        'Authorization': 'Bearer ' + parsedUserJSON.idToken\n    },\n      responseType: 'text'\n    });\n  }\n  \n  //continue overriding stageIndex\n  continueOverridingStage(domainId: string, executionId: string, inputs: { id: string, value: any }[], overrideStageIndex: number): Observable<any> {\n    let url = `${PropertiesService.properties.fileServiceUrl}/execution/${domainId}/${executionId}/continue?overrideStageIndex=${overrideStageIndex}`;\n\n    let userJSON = sessionStorage.getItem('user');\n    const parsedUserJSON = userJSON != null && userJSON != '' ? JSON.parse(userJSON) : \"\";\n\n    let payload = {\n      inputs: inputs\n    };\n\n    return this.http.post(url, payload, \n    {\n      headers: {\n        'Authorization': 'Bearer ' + parsedUserJSON.idToken\n    },\n      responseType: 'text'\n    });\n  }\n}\n","import { NgBaseLibModule, PropertiesService } from '@alis/ng-base';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    NgBaseLibModule,\n    HttpClientModule\n  ],\n  exports: []\n})\nexport class WorkflowLibModule {\n\n  ready = false;\n\n  constructor(private propertiesService: PropertiesService) {\n    this.propertiesService.readAllProperties().subscribe(() => {\n      this.ready = true;\n    })\n  }\n\n}\n","import { PropertiesService } from \"@alis/ng-base\";\n\nexport class FileServiceMetadata {\n    domainId: string; //\"aestests\"\n    traceType: string; //\"file\"\n    objectId: string; //\"45cb34a4-aec6-4d62-8acd-6cb361cff26d\"\n    subDomainId: string; //\"filetest\"\n    timestamp: number; //1611233898259\n    tags: string;  //null\n    deletionDateTimestamp: number; //1611233941300\n    link: string; //\"\"\n    entryType: string; //FILE or DIRECTORY\n    creationDate: string; //\"2021-01-21T12:58:18.259977700Z\"\n    type: string; //doc\n    creationDateTimestamp: number; //1611233898259\n    createdAt: string; //\"2021-01-09T17:00:00-03:00\"\n    path: Array<string>; //[\"aestests\", \"filetest\"]\n    lastAccessBy: string; //\"Oberdan\"\n    size: number; //\"1763738\"\n    createdBy: string; //\"Oberdan\"\n    deletionDate: string; //\"2021-01-21T12:59:01.300895Z\"\n    lastAccessDate: string; //\"2021-01-21T12:58:52.505725100Z\"\n    name: string; //\"Arquivo 77\"\n    location: string; //\"/aestests/filetest/\"\n    lastAccessDateTimestamp: number; //1611233932505\n    state: string; //\"REMOVED\"\n\n    static fromFile(domainId: string,file: File, user?: string): FileServiceMetadata {\n        let fileServiceMetadata = new FileServiceMetadata();\n        fileServiceMetadata.domainId = domainId;\n        fileServiceMetadata.subDomainId = \"users\";\n        fileServiceMetadata.name = file.name;\n        fileServiceMetadata.type = file.name.substring(file.name.lastIndexOf(\".\")+1);\n        fileServiceMetadata.timestamp = Date.now();\n        fileServiceMetadata.tags = null;\n        fileServiceMetadata.entryType = \"FILE\";\n        fileServiceMetadata.size = file.size;\n        fileServiceMetadata.path = [ \n            fileServiceMetadata.domainId,\n            fileServiceMetadata.subDomainId,\n            user\n        ]\n        return fileServiceMetadata;\n    }\n\n    isFolder(): boolean {\n        return \"DIRECTORY\" === this.entryType;\n    }\n}","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { FileServiceMetadata } from './model/file-service-metadata';\nimport { PropertiesService } from '@alis/ng-base';\nimport { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FileServiceMetadataService {\n\n  constructor(private http: HttpClient) {}\n\n\n  removeMetadata(domainId: string, fileObjectId: string, repository?: string): Observable<any> {\n    let url = repository || PropertiesService.properties.fileServiceUrl + \"/fileservice/file\";\n    let options = {\n      headers: new HttpHeaders()\n        .set(\"accept\", \"*/*\"),\n      params: new HttpParams()\n        .set(\"domainId\", domainId)\n        .set(\"id\", fileObjectId)\n    };\n    return this.http.delete(url, options);\n  }\n\n  removeFile(removeLink: string): Observable<any> {\n    return this.http.delete(removeLink);\n  }\n\n  uploadMetadata(newFileServiceMetadata: FileServiceMetadata, repository?: string): Observable<any> {\n    let url = repository || PropertiesService.properties.fileServiceUrl + \"/fileservice/file\";\n    let options = {\n      headers: new HttpHeaders()\n      .set(\"accept\", \"*/*\")\n      .set(\"content-type\", \"application/json\")\n    };\n    return this.http.post<FileServiceMetadata>(url, newFileServiceMetadata, options);\n  }\n\n  /*\n    obs: the headers received by this method, comes in this format:\n    {\n      <header1>: <header1 value>,\n      <header2>: <header2 value>\n      .\n      .\n      .\n    }\n\n    when receiving headers as HttpHeaders, built by the service consumer, \n    the headers that were added goes to \"lazyUpdate\" field inside HttpHeaders\n    instance instead \"headers\" field, which leads to CORS error due those mandatory\n    headers are not been sent.\n\n    in order to solve this, the \"headers\" object, demanded by HttpClient methods, \n    accepts a plain JSON object. therefore, the service consumer should send\n    \"headers\" as a plain JSON object.\n  */\n  uploadFile(uploadLink: string, file: File, headers: any): Observable<any> { \n    let options = {\n      headers: headers\n    }\n    return this.http.put<any>(uploadLink, file, options);\n  }\n\n  //TODO - verificar se existe uma forma de jÃ¡ buscar os metadados ordenados atravÃ©s do indexing;\n  //o mesmo vale para processos e execuÃ§Ãµes; enquanto isso, o front ordena as listas quando necessÃ¡rio\n  /**\n   * \n   * @param domainId \n   * @param path \n   * @param repository \n   * @param query HTTP List of filters using the Aurion SearchCriteria pattern: key.operation:filterValue[,otherFilterValue]. Operations: eq/neq/sw/gt/egt/lt/elt. (ex: attribute1.eq:testValue)\n   */\n  list(domainId: string, path: string, strictly?: boolean, repository?: string, query?: string ): Observable<Array<FileServiceMetadata>> {\n    let url = repository || PropertiesService.properties.fileServiceUrl + \"/fileservice/list\";\n\n\n    let params =  new HttpParams()\n    .set(\"domainId\", domainId)\n    .set(\"path\", path)\n    .set(\"locationStrictly\", strictly != null ? \"\" + strictly : \"false\");\n\n    if(query != null){\n      params = params.set('query',query);\n    }\n\n    let options = {\n      headers: new HttpHeaders().set(\"accept\", \"*/*\"),\n      params: params\n    };\n    return this.http.get<Array<FileServiceMetadata>>(url, options).pipe(\n      map( (fileServiceMetadatas: Array<FileServiceMetadata>) => {\n        return fileServiceMetadatas.sort((a: FileServiceMetadata, b: FileServiceMetadata) => {\n          return a.creationDateTimestamp > b.creationDateTimestamp ? -1 : 1;\n        })\n      })\n    );\n  }\n\n  getFileDetail(domainId: string, fileId: string, repository?: string): Observable<any> {\n    let url = repository || PropertiesService.properties.fileServiceUrl + \"/fileservice/file\";\n    let options = {\n      headers: new HttpHeaders()\n        .set(\"accept\", \"*/*\"),\n      params: new HttpParams()\n        .set(\"domainId\", domainId)\n        .set(\"id\", fileId)\n    };\n    return this.http.get(url, options);\n  }\n\n  downloadFile(fileMetadata: FileServiceMetadata): void {\n    this.getFileDetail(fileMetadata.domainId, fileMetadata.objectId).subscribe( fileDetail => {\n      if (fileDetail != null) {\n        const link = fileDetail.metadata.link ? fileDetail.metadata.link : fileDetail['link'];\n        const metadata: FileServiceMetadata = fileDetail['metadata'];\n        if(metadata == null) {\n          console.warn('metadata received is null');\n          return null;\n        }\n        let fileName = metadata.name;\n        this.download(link,fileName);\n      } else {\n        console.error(\"response is null\", fileDetail);\n      }\n\n    }, (error) => {\n      console.error(error);\n    });\n  }\n\n  async download(url, fileName) {\n    const a = document.createElement(\"a\");\n    a.href = await this.toDataURL(url);\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n  }\n\n  toDataURL(url) {\n    return fetch(url).then((response) => {\n      return response.blob();\n    }).then(blob => {\n      return URL.createObjectURL(blob);\n    });\n  }\n\n  getBytes(fileId: string, repository?: string): Observable<ArrayBuffer> {\n    return null;\n  }\n\n  // getRootFolder(): StorableFolder {\n  //   return this.rootFolder;\n  // }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { FileServiceMetadata } from './model/file-service-metadata';\nimport { PropertiesService } from '@alis/ng-base';\nimport { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { Schedule } from './model/schedule';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScheduleService {\n\n  constructor(private http: HttpClient) {}\n\n  // GET /schedule/{domainId}/process/{processId}\n  getProcessSchedules(domainId: string, processId: string):  Observable<Array<Schedule>> {\n    const url = PropertiesService.properties.scheduleServiceUrl + \"/\" + domainId + \"/process/\" +  processId;\n    return this.http.get<Array<Schedule>>(url);\n  }\n\n  // POST /schedule/{domainId}/{processId}\n  createOrUpdateSchedule(domainId: string, processId: string, schedule: Schedule): Observable<string> {\n    const url = PropertiesService.properties.scheduleServiceUrl + \"/\" + domainId + \"/\" +  processId;\n    schedule.processId = schedule.processId  || processId;\n    return this.http.post(url, schedule, {responseType: 'text'});\n  }\n\n  // DELETE /schedule/{domainId}/{scheduleId}\n  deleteSchedule(domainId: string, scheduleId: string): Observable<any> {\n    const url = PropertiesService.properties.scheduleServiceUrl + \"/\" + domainId + \"/\" +  scheduleId;\n    return this.http.delete<any>(url);\n  }\n}\n","/*\n * Public API Surface of workflow\n */\n\nexport * from './lib/execution.service';\nexport * from './lib/model/event';\nexport * from './lib/model/eventDTO';\nexport * from './lib/model/execution';\nexport * from './lib/model/executionDTO';\nexport * from './lib/model/schedule';\nexport * from './lib/model/process';\nexport * from './lib/model/parameters-definition';\nexport * from './lib/model/entry-input';\nexport * from './lib/model/input-definition';\nexport * from './lib/model/data-source';\nexport * from './lib/model/processStep';\nexport * from './lib/process.service';\nexport * from './lib/workflow-lib.module';\nexport * from './lib/model/file-service-metadata';\nexport * from './lib/file-service-metadata.service';\nexport * from './lib/schedule.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}